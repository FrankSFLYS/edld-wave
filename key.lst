C51 COMPILER V9.01   KEY                                                                   07/12/2018 10:33:24 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE KEY
OBJECT MODULE PLACED IN key.obj
COMPILER INVOKED BY: G:\Keil\k4\C51\BIN\C51.EXE src\key.c BROWSE DEBUG OBJECTEXTEND PRINT(.\key.lst) OBJECT(key.obj)

line level    source

   1          /**********************************************************************
   2          @Author: frank.xin
   3          @Date  : 7/11/2018
   4          File name : key.c
   5          File target: STC89C52 with PCF8591 ADDA Converter
   6          Approach  : To scan key matrix and return specified keycode
   7          http://frank.xin
   8          **********************************************************************/
   9          #include "key.h"
  10          #include "delay.h"
  11          
  12          // storing keycode
  13          unsigned char _KEY_H_key;
  14          // get temporary matrix info
  15          unsigned char _KEY_H_temp;
  16          
  17          /*
  18           * Scaning key matrix (key matrix connected to P3, with 4x4 keys)
  19           * Scan P3 row by row, whenever a pin is pulled down, start scan the
  20           * row column by column.
  21           */
  22          int mKeyScan() {
  23   1              _KEY_H_key = KEY_NULL;  // if no keys pressed, return KEY_NULL
  24   1      
  25   1              // Start scaning S1~S4
  26   1              P3 = 0xfe;
  27   1          _KEY_H_temp = P3;
  28   1          _KEY_H_temp = _KEY_H_temp & 0xf0;   // Check down-pulling in P3.7~P3.4
  29   1          if(_KEY_H_temp != 0xf0) {   // Pulling down in P3
  30   2            delay(10);                                // In case of noise
  31   2            if(_KEY_H_temp != 0xf0) {
  32   3              _KEY_H_temp = P3;               // Get which pin
  33   3              switch(_KEY_H_temp) {
  34   4                              case 0xee: _KEY_H_key = KEY_SIN; break; // Pulling down on P3.4(and P3.0)
  35   4                              case 0xde: _KEY_H_key = KEY_SQR; break;
  36   4                              case 0xbe: _KEY_H_key = KEY_TRI; break;
  37   4                              case 0x7e: _KEY_H_key = KEY_SAW; break;
  38   4              }
  39   3              while(_KEY_H_temp != 0xf0) {    // Wait untill the key is released
  40   4                              _KEY_H_temp = P3;
  41   4                              _KEY_H_temp = _KEY_H_temp & 0xf0;
  42   4                      }
  43   3            }
  44   2          }
  45   1              // Start scaning S5~S7
  46   1          P3 = 0xfd;
  47   1          _KEY_H_temp = P3;
  48   1          _KEY_H_temp = _KEY_H_temp & 0xf0;
  49   1          if(_KEY_H_temp != 0xf0) {
  50   2                      delay(10);
  51   2                      if(_KEY_H_temp != 0xf0) {
  52   3                              _KEY_H_temp = P3;
  53   3                              switch(_KEY_H_temp) {
  54   4                              case 0xed: _KEY_H_key = KEY_FRE_R_ADD; break;
  55   4                              case 0xdd: _KEY_H_key = KEY_FRE_A_ADD; break;
C51 COMPILER V9.01   KEY                                                                   07/12/2018 10:33:24 PAGE 2   

  56   4                              case 0xbd: _KEY_H_key = KEY_AMP_R_ADD; break;
  57   4                              case 0x7d: _KEY_H_key = KEY_AMP_A_ADD; break;
  58   4                              } 
  59   3                              while(_KEY_H_temp != 0xf0) {
  60   4                                      _KEY_H_temp = P3;
  61   4                                      _KEY_H_temp = _KEY_H_temp & 0xf0;
  62   4                              }
  63   3                      }
  64   2              }
  65   1              // Start scaning S8~S12
  66   1          P3 = 0xfb;
  67   1          _KEY_H_temp = P3;
  68   1          _KEY_H_temp = _KEY_H_temp & 0xf0;
  69   1          if(_KEY_H_temp != 0xf0) {
  70   2                      delay(10);
  71   2                      if(_KEY_H_temp != 0xf0) {
  72   3                              _KEY_H_temp = P3;
  73   3                              switch(_KEY_H_temp) {
  74   4                                      case 0xeb: _KEY_H_key = KEY_FRE_R_SUB; break;
  75   4                                      case 0xdb: _KEY_H_key = KEY_FRE_A_SUB; break;
  76   4                                      case 0xbb: _KEY_H_key = KEY_AMP_R_SUB; break;
  77   4                                      case 0x7b: _KEY_H_key = KEY_AMP_A_SUB; break;
  78   4                              }
  79   3                              while(_KEY_H_temp != 0xf0) {
  80   4                                      _KEY_H_temp = P3;
  81   4                                      _KEY_H_temp = _KEY_H_temp & 0xf0;
  82   4                              }
  83   3                      }
  84   2              }
  85   1              // Start scaning S13~S15
  86   1          P3 = 0xf7;
  87   1          _KEY_H_temp = P3;
  88   1          _KEY_H_temp = _KEY_H_temp & 0xf0;
  89   1          if(_KEY_H_temp != 0xf0) {
  90   2                      delay(10);
  91   2                      if(_KEY_H_temp != 0xf0) {
  92   3                              _KEY_H_temp = P3;
  93   3                              switch(_KEY_H_temp) {
  94   4                              case 0xe7: _KEY_H_key = KEY_ONOFF; break;
  95   4                              case 0xd7: _KEY_H_key = KEY_ONOFF; break;
  96   4                              case 0xb7: _KEY_H_key = KEY_ONOFF; break;
  97   4                              case 0x77: _KEY_H_key = KEY_ONOFF; break;
  98   4                              }
  99   3                              while(_KEY_H_temp != 0xf0) {
 100   4                                      _KEY_H_temp = P3;
 101   4                                      _KEY_H_temp = _KEY_H_temp & 0xf0;
 102   4                              }                       
 103   3                      }
 104   2          }
 105   1              return _KEY_H_key;
 106   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    311    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      2    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.01   KEY                                                                   07/12/2018 10:33:24 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
